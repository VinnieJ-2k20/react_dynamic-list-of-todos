{"version":3,"sources":["components/TodoList/TodoList.jsx","api/api.js","components/CurrentUser/CurrentUser.jsx","App.jsx","index.js"],"names":["TodoList","state","titleQuery","completedMode","handleChange","event","target","name","value","setState","filterByTitle","todo","title","toLowerCase","includes","filterByStatus","completed","this","props","todos","onUserSelect","todosLoaded","onShuffle","filteredTodos","filter","className","htmlFor","type","id","autoComplete","onChange","onClick","map","key","classnames","readOnly","checked","userId","React","Component","API_URL","getAllTodos","fetch","then","confirmFetch","getUser","response","ok","Error","status","json","CurrentUser","user","loadError","componentDidMount","updateUserInfo","componentDidUpdate","newUserId","a","data","clearUser","email","phone","PureComponent","App","selectedUserId","onUserClear","shuffleTodos","shuffledTodos","index","length","pick","Math","floor","random","temp","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4567929e.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\nimport './TodoList.scss';\n\nexport class TodoList extends React.Component {\n  state = {\n    titleQuery: '',\n    completedMode: 'all',\n  }\n\n  static propTypes = {\n    todos: PropTypes.arrayOf(PropTypes.shape({\n      title: PropTypes.string,\n      userId: PropTypes.number,\n      completed: PropTypes.bool,\n      id: PropTypes.number.isRequired,\n    })).isRequired,\n    onUserSelect: PropTypes.func.isRequired,\n    todosLoaded: PropTypes.bool.isRequired,\n    onShuffle: PropTypes.func.isRequired,\n  }\n\n  handleChange = (event) => {\n    const { name, value } = event.target;\n\n    this.setState({\n      [name]: value,\n    });\n  }\n\n  filterByTitle = (todo) => {\n    if (todo.title === null) {\n      return false;\n    }\n\n    return todo.title.toLowerCase()\n      .includes(this.state.titleQuery.toLowerCase());\n  }\n\n  filterByStatus = (todo) => {\n    const { completedMode } = this.state;\n\n    switch (completedMode) {\n      case 'completed':\n        return todo.completed;\n\n      case 'active':\n        return !todo.completed;\n\n      default:\n        return true;\n    }\n  }\n\n  render() {\n    const { todos, onUserSelect, todosLoaded, onShuffle } = this.props;\n    const { titleQuery, completedMode } = this.state;\n\n    const filteredTodos = todos\n      .filter(this.filterByTitle)\n      .filter(this.filterByStatus);\n\n    return (\n      <div className=\"TodoList\">\n        {todosLoaded\n          ? (<h2>Todos:</h2>)\n          : (<p>Error occured while loading users</p>)\n        }\n\n        <div className=\"TodoList__list-container\">\n          <label htmlFor=\"titleQuery\">\n            Filter todos:&nbsp;\n            <input\n              type=\"text\"\n              name=\"titleQuery\"\n              id=\"titleQuery\"\n              autoComplete=\"off\"\n              value={titleQuery}\n              onChange={this.handleChange}\n            />\n          </label>\n\n          <label htmlFor=\"completedMode\">\n            Show:&nbsp;\n            <select\n              name=\"completedMode\"\n              id=\"completedMode\"\n              value={completedMode}\n              onChange={this.handleChange}\n            >\n              <option value=\"all\">All</option>\n              <option value=\"completed\">Completed</option>\n              <option value=\"active\">Active</option>\n            </select>\n          </label>\n\n          <button\n            type=\"button\"\n            className=\"button\"\n            onClick={onShuffle}\n          >\n            Shuffle todos\n          </button>\n\n          <ul className=\"TodoList__list\">\n            {filteredTodos.map(todo => (\n              <li\n                key={todo.id}\n                className={classnames('TodoList__item', {\n                  'TodoList__item--unchecked': !todo.completed,\n                  'TodoList__item--checked': todo.completed,\n                })}\n              >\n                <label>\n                  <input\n                    type=\"checkbox\"\n                    readOnly\n                    checked={todo.completed}\n                  />\n                  <p>{todo.title}</p>\n                </label>\n\n                <button\n                  className={classnames(\n                    'TodoList__user-button',\n                    'button',\n                    { 'TodoList__user-button--selected': true },\n                  )}\n                  onClick={() => {\n                    onUserSelect(todo.userId);\n                  }}\n                  type=\"button\"\n                >\n                  User&nbsp;#\n                  {todo.userId}\n                </button>\n              </li>\n            ))}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n","// eslint-disable-next-line\nconst API_URL = `https://mate-api.herokuapp.com`;\n\nexport function getAllTodos() {\n  return fetch(`${API_URL}/todos`)\n    .then(confirmFetch);\n}\n\nexport function getUser(userId) {\n  return fetch(`${API_URL}/users/${userId}`)\n    .then(confirmFetch);\n}\n\nfunction confirmFetch(response) {\n  if (!response.ok) {\n    throw new Error(`${response.status}`);\n  }\n\n  return response.json();\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { getUser } from '../../api/api';\nimport './CurrentUser.scss';\n\nexport class CurrentUser extends React.PureComponent {\n  state = {\n    user: {},\n    loadError: false,\n  }\n\n  static propTypes = {\n    userId: PropTypes.number.isRequired,\n    clearUser: PropTypes.func.isRequired,\n  }\n\n  componentDidMount = () => {\n    this.updateUserInfo(this.props.userId);\n  }\n\n  componentDidUpdate = ({ userId }) => {\n    const newUserId = this.props.userId;\n\n    if (userId !== newUserId) {\n      this.updateUserInfo(newUserId);\n    }\n  }\n\n  updateUserInfo = async(userId) => {\n    try {\n      await getUser(userId).then((user) => {\n        if (user.data === null) {\n          throw new Error('User info missing');\n        }\n\n        this.setState({\n          user: user.data,\n          loadError: false,\n        });\n      });\n    } catch (error) {\n      this.setState({\n        user: {},\n        loadError: true,\n      });\n    }\n  }\n\n  render() {\n    const { user, loadError } = this.state;\n    const { clearUser } = this.props;\n\n    return (\n      <div className=\"CurrentUser\">\n        <h2 className=\"CurrentUser__title\">\n          <span>\n            Selected user:&nbsp;\n            {user && user.id}\n          </span>\n        </h2>\n\n        {loadError\n          && (\n            <h3 className=\"CurrentUser__name\">\n              Unable to load User info\n            </h3>\n          )\n        }\n\n        <h3 className=\"CurrentUser__name\">\n          {user && user.name}\n        </h3>\n        <p className=\"CurrentUser__email\">\n          {user && user.email}\n        </p>\n        <p className=\"CurrentUser__phone\">\n          {user && user.phone}\n        </p>\n        <button\n          className=\"CurrentUser__clear button\"\n          type=\"button\"\n          onClick={clearUser}\n        >\n          Clear user selection\n        </button>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getAllTodos } from './api/api';\n\nclass App extends React.Component {\n  state = {\n    todos: [],\n    selectedUserId: 0,\n    loadError: false,\n  };\n\n  componentDidMount = async() => {\n    try {\n      await getAllTodos().then((todos) => {\n        this.setState({ todos: todos.data });\n      });\n    } catch (error) {\n      this.setState({ loadError: true });\n    }\n  }\n\n  onUserSelect = (userId) => {\n    this.setState({ selectedUserId: userId });\n  }\n\n  onUserClear = () => {\n    this.setState({ selectedUserId: 0 });\n  }\n\n  shuffleTodos = () => {\n    this.setState(({ todos }) => {\n      const shuffledTodos = [...todos];\n      let index = shuffledTodos.length;\n\n      while (index) {\n        const pick = Math.floor(Math.random() * index);\n        // eslint-disable-next-line\n        index--;\n        const temp = shuffledTodos[index];\n\n        shuffledTodos[index] = shuffledTodos[pick];\n        shuffledTodos[pick] = temp;\n      }\n\n      return {\n        todos: shuffledTodos,\n      };\n    });\n  }\n\n  render() {\n    const { todos, selectedUserId, loadError } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList\n            todos={todos}\n            onUserSelect={this.onUserSelect}\n            todosLoaded={!loadError}\n            onShuffle={this.shuffleTodos}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                userId={selectedUserId}\n                clearUser={this.onUserClear}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}